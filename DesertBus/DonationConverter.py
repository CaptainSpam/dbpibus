#!/usr/bin/python3

import math

# This is mostly ported over from DonationConverter in DBWidget.  Or at least as
# close as I could get it without some of Java/Kotlin's fun tricks, like
# NavigableMap or whatnot.

# The thresholds of donations needed for each hour.  The zeroth index represents
# one hour of bussing.  This is handy so we don't need to do floating point math
# if we don't want to.  The array goes out to 256 hours of bussing, which is
# quite genuinely absurd for DB, but if we DO need more for some reason, we'll
# just do the dang floating point math, I guess.
_HOUR_THRESHOLDS = [
            1.00,
            2.07,
            3.21,
            4.44,
            5.75,
            7.15,
            8.65,
            10.26,
            11.98,
            13.82,
            15.78,
            17.89,
            20.14,
            22.55,
            25.13,
            27.89,
            30.84,
            34.00,
            37.38,
            41.00,
            44.87,
            49.01,
            53.44,
            58.18,
            63.25,
            68.68,
            74.48,
            80.70,
            87.35,
            94.46,
            102.07,
            110.22,
            118.93,
            128.26,
            138.24,
            148.91,
            160.34,
            172.56,
            185.64,
            199.64,
            214.61,
            230.63,
            247.78,
            266.12,
            285.75,
            306.75,
            329.22,
            353.27,
            379.00,
            406.53,
            435.99,
            467.50,
            501.23,
            537.32,
            575.93,
            617.24,
            661.45,
            708.75,
            759.36,
            813.52,
            871.47,
            933.47,
            999.81,
            1070.80,
            1146.76,
            1228.03,
            1314.99,
            1408.04,
            1507.60,
            1614.13,
            1728.12,
            1850.09,
            1980.60,
            2120.24,
            2269.66,
            2429.53,
            2600.60,
            2783.64,
            2979.50,
            3189.06,
            3413.30,
            3653.23,
            3909.95,
            4184.65,
            4478.58,
            4793.08,
            5129.59,
            5489.66,
            5874.94,
            6287.19,
            6728.29,
            7200.27,
            7705.29,
            8245.66,
            8823.85,
            9442.52,
            10104.50,
            10812.81,
            11570.71,
            12381.66,
            13249.38,
            14177.83,
            15171.28,
            16234.27,
            17371.67,
            18588.69,
            19890.90,
            21284.26,
            22775.16,
            24370.42,
            26077.35,
            27903.76,
            29858.03,
            31949.09,
            34186.52,
            36580.58,
            39142.22,
            41883.18,
            44816.00,
            47954.12,
            51311.91,
            54904.74,
            58749.07,
            62862.51,
            67263.88,
            71973.36,
            77012.49,
            82404.37,
            88173.67,
            94346.83,
            100952.11,
            108019.75,
            115582.14,
            123673.89,
            132332.06,
            141596.30,
            151509.04,
            162115.68,
            173464.77,
            185608.31,
            198601.89,
            212505.02,
            227381.37,
            243299.07,
            260331.00,
            278555.17,
            298055.04,
            318919.89,
            341245.28,
            365133.45,
            390693.79,
            418043.36,
            447307.39,
            478619.91,
            512124.30,
            547974.01,
            586333.19,
            627377.51,
            671294.93,
            718286.58,
            768567.64,
            822368.37,
            879935.16,
            941531.62,
            1007439.84,
            1077961.62,
            1153419.94,
            1234160.33,
            1320552.56,
            1412992.24,
            1511902.69,
            1617736.88,
            1730979.46,
            1852149.03,
            1981800.46,
            2120527.49,
            2268965.41,
            2427793.99,
            2597740.57,
            2779583.41,
            2974155.25,
            3182347.12,
            3405112.42,
            3643471.29,
            3898515.28,
            4171412.35,
            4463412.21,
            4775852.06,
            5110162.71,
            5467875.10,
            5850627.36,
            6260172.27,
            6698385.33,
            7167273.30,
            7668983.43,
            8205813.27,
            8780221.20,
            9394837.69,
            10052477.33,
            10756151.74,
            11509083.36,
            12314720.19,
            13176751.61,
            14099125.22,
            15086064.99,
            16142090.54,
            17272037.87,
            18481081.52,
            19774758.23,
            21158992.31,
            22640122.77,
            24224932.36,
            25920678.63,
            27735127.13,
            29676587.03,
            31753949.12,
            33976726.56,
            36355098.42,
            38899956.31,
            41622954.25,
            44536562.05,
            47654122.39,
            50989911.96,
            54559206.80,
            58378352.27,
            62464837.93,
            66837377.59,
            71515995.02,
            76522115.67,
            81878664.77,
            87610172.30,
            93742885.36,
            100304888.34,
            107326231.52,
            114839068.73,
            122877804.54,
            131479251.86,
            140682800.49,
            150530597.52,
            161067740.35,
            172342483.17,
            184406457.99,
            197314911.05,
            211126955.83,
            225905843.73,
            241719253.80,
            258639602.56,
            276744375.74,
            296116483.04,
            316844637.86,
            339023763.50,
            362755427.95,
            388148308.91,
            415318691.53,
            444391000.94,
            475498372.00]

# Enumerate this ahead of time, as we'll be referring to it a lot.
_HOUR_MAP = [(hours, amount) for (hours, amount) in enumerate(_HOUR_THRESHOLDS, start=1)]

def _calculate_total_needed_for_hour(hour: int) -> float:
    return round(((1 - 1.07 ** hour) / 0.07) * -1, 2)

def _calculate_amount_needed_to_next_hour(hour: int) -> float:
    return 1.07 ** hour

def total_hours_for_donation_amount(current: float) -> int:
    """Calculates the total hours that will be bussed given the donation total.
    This will be an int, not a fractional amount of hours.  This may lose
    accuracy at absurd amounts."""
    if current >= _HOUR_THRESHOLDS[-1]:
        # In this case, the donations are beyond the lookup table, so some
        # floating point math is necessary.  This shouldn't happen.  They aren't
        # going to bus for 256 hours.
        return int(math.floor(math.log10(1 + 0.07 * current) / math.log10(1.07)))

    (hours, amount) = [(hours, amount) for (hours, amount) in _HOUR_MAP if amount < current][-1]
    return hours

def to_next_hour_from_donation_amount(current: float) -> float:
    """Calculates the amount of donations needed for the next hour given the
    donation total.  This should not return zero in most cases; if Team Order
    has indeed succeeded in bringing the total to exactly the amount needed for
    the next hour and it's held long enough for this to recognize it, this
    should return the NEXT hour's requirement.  However, owing to floating point
    goofiness, at high enough values it may return inaccurate results, including
    zero."""
    if current >= _HOUR_THRESHOLDS[-1]:
        # Again, the donations are beyond the lookup table.  Again, this can get
        # silly with the floating point math, but, again, this shouldn't happen.
        return round(_calculate_total_needed_for_hour(total_hours_for_donation_amount(current) + 1) - current, 2)

    (hours, amount) = [(hours, amount) for (hours, amount) in _HOUR_MAP if amount > current][0]
    return round(amount - current, 2)

